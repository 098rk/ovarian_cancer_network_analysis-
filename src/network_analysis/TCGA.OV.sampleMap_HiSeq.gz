import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind
from statsmodels.stats.multitest import multipletests
from sklearn.decomposition import PCA
from scipy.cluster.hierarchy import dendrogram, linkage
import gzip

# Load the dataset
file_path = "D:\\ProjectFiles\\Geeks\\New folder\\TCGA.OV.sampleMap_HiSeq.gz"
with gzip.open(file_path, 'rt') as f:
    data = pd.read_csv(f, index_col=0)  # Use the first column (gene names) as the index

# Check the first few rows
print(data.head())

# Drop rows/columns with all NaN values
data = data.dropna(how='all')
data = data.dropna(axis=1, how='all')

# Log2 transformation (if needed for normalization)
data = np.log2(data + 1)  # Add 1 to avoid log(0)

# Summary statistics for the first few samples
print(data.iloc[:, :5].describe())

# Plot the distribution of gene expression for the first sample
plt.figure(figsize=(8, 6))
sns.histplot(data.iloc[:, 0], bins=50, kde=True)
plt.title("Gene Expression Distribution")
plt.xlabel("Expression (log2)")
plt.ylabel("Frequency")
plt.show()

# Create a heatmap of the top 100 genes
plt.figure(figsize=(10, 8))
sns.heatmap(data.iloc[:100, :], cmap="viridis", xticklabels=False, yticklabels=False)
plt.title("Heatmap of Top 100 Genes")
plt.show()

# Differential expression analysis (example: first 50 samples as group 1, next 50 as group 2)
group1 = data.iloc[:, :50]
group2 = data.iloc[:, 50:100]

p_values = []
for i in range(data.shape[0]):
    t_stat, p_val = ttest_ind(group1.iloc[i, :], group2.iloc[i, :])
    p_values.append(p_val)

# Adjust p-values for multiple testing (e.g., using Benjamini-Hochberg)
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]

# Create a DataFrame for results
diff_expr_results = pd.DataFrame({
    'Gene': data.index,
    'p_value': p_values,
    'adjusted_p_value': adjusted_p_values
})

# Sort by adjusted p-value
diff_expr_results = diff_expr_results.sort_values(by='adjusted_p_value')

# Display top differentially expressed genes
print(diff_expr_results.head())

# Save differentially expressed genes
diff_expr_results.to_csv("Differentially_Expressed_Genes.csv", index=False)

# Perform PCA
pca = PCA(n_components=2)
pca_result = pca.fit_transform(data.T)  # Transpose to have samples as rows

# Plot PCA
plt.figure(figsize=(8, 6))
plt.scatter(pca_result[:, 0], pca_result[:, 1])
plt.title("PCA Plot")
plt.xlabel("PC1")
plt.ylabel("PC2")
plt.show()

# Perform hierarchical clustering
Z = linkage(data.T, method='ward')  # Transpose to have samples as rows

# Plot dendrogram
plt.figure(figsize=(10, 7))
dendrogram(Z, labels=data.columns, leaf_rotation=90)
plt.title("Hierarchical Clustering Dendrogram")
plt.xlabel("Samples")
plt.ylabel("Distance")
plt.show()

# Save PCA results
pca_df = pd.DataFrame(pca_result, columns=['PC1', 'PC2'], index=data.columns)
pca_df.to_csv("PCA_Results.csv")
